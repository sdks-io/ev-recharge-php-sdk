<?php

declare(strict_types=1);

/*
 * ShellEVLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ShellEVLib\Models;

use ShellEVLib\ApiHelper;
use stdClass;

/**
 * A Marker is a place on the map that represent multiple Locations at the same spot
 */
class MultiLocationMarker implements \JsonSerializable
{
    /**
     * @var string
     */
    private $markerType;

    /**
     * @var string|null
     */
    private $uniqueKey;

    /**
     * @var Coordinates|null
     */
    private $coordinates;

    /**
     * @var float|null
     */
    private $locationCount;

    /**
     * @var float|null
     */
    private $evseCount;

    /**
     * @var float|null
     */
    private $maxPower;

    /**
     * @var string|null
     */
    private $geoHash;

    /**
     * @param string $markerType
     */
    public function __construct(string $markerType)
    {
        $this->markerType = $markerType;
    }

    /**
     * Returns Marker Type.
     * Identifies the marker type. If it's a `MultiLocationMarker`, then the value is `MultiLocation`
     */
    public function getMarkerType(): string
    {
        return $this->markerType;
    }

    /**
     * Sets Marker Type.
     * Identifies the marker type. If it's a `MultiLocationMarker`, then the value is `MultiLocation`
     *
     * @required
     * @maps markerType
     */
    public function setMarkerType(string $markerType): void
    {
        $this->markerType = $markerType;
    }

    /**
     * Returns Unique Key.
     * Uniquely identifies the marker object
     */
    public function getUniqueKey(): ?string
    {
        return $this->uniqueKey;
    }

    /**
     * Sets Unique Key.
     * Uniquely identifies the marker object
     *
     * @maps uniqueKey
     */
    public function setUniqueKey(?string $uniqueKey): void
    {
        $this->uniqueKey = $uniqueKey;
    }

    /**
     * Returns Coordinates.
     * Coordinates of the Shell Recharge Site Location
     */
    public function getCoordinates(): ?Coordinates
    {
        return $this->coordinates;
    }

    /**
     * Sets Coordinates.
     * Coordinates of the Shell Recharge Site Location
     *
     * @maps coordinates
     */
    public function setCoordinates(?Coordinates $coordinates): void
    {
        $this->coordinates = $coordinates;
    }

    /**
     * Returns Location Count.
     * Number of Locations that this Marker represents in the given set of bounds
     */
    public function getLocationCount(): ?float
    {
        return $this->locationCount;
    }

    /**
     * Sets Location Count.
     * Number of Locations that this Marker represents in the given set of bounds
     *
     * @maps locationCount
     */
    public function setLocationCount(?float $locationCount): void
    {
        $this->locationCount = $locationCount;
    }

    /**
     * Returns Evse Count.
     * Total number of Evses in Locations that this Marker represents
     */
    public function getEvseCount(): ?float
    {
        return $this->evseCount;
    }

    /**
     * Sets Evse Count.
     * Total number of Evses in Locations that this Marker represents
     *
     * @maps evseCount
     */
    public function setEvseCount(?float $evseCount): void
    {
        $this->evseCount = $evseCount;
    }

    /**
     * Returns Max Power.
     * Maximum power in kW across all locations grouped in this marker (disregarding availability)
     */
    public function getMaxPower(): ?float
    {
        return $this->maxPower;
    }

    /**
     * Sets Max Power.
     * Maximum power in kW across all locations grouped in this marker (disregarding availability)
     *
     * @maps maxPower
     */
    public function setMaxPower(?float $maxPower): void
    {
        $this->maxPower = $maxPower;
    }

    /**
     * Returns Geo Hash.
     * GeoHash of marker coordinates
     */
    public function getGeoHash(): ?string
    {
        return $this->geoHash;
    }

    /**
     * Sets Geo Hash.
     * GeoHash of marker coordinates
     *
     * @maps geoHash
     */
    public function setGeoHash(?string $geoHash): void
    {
        $this->geoHash = $geoHash;
    }

    /**
     * Converts the MultiLocationMarker object to a human-readable string representation.
     *
     * @return string The string representation of the MultiLocationMarker object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify(
            'MultiLocationMarker',
            [
                'markerType' => $this->markerType,
                'uniqueKey' => $this->uniqueKey,
                'coordinates' => $this->coordinates,
                'locationCount' => $this->locationCount,
                'evseCount' => $this->evseCount,
                'maxPower' => $this->maxPower,
                'geoHash' => $this->geoHash
            ]
        );
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['markerType']        = $this->markerType;
        if (isset($this->uniqueKey)) {
            $json['uniqueKey']     = $this->uniqueKey;
        }
        if (isset($this->coordinates)) {
            $json['coordinates']   = $this->coordinates;
        }
        if (isset($this->locationCount)) {
            $json['locationCount'] = $this->locationCount;
        }
        if (isset($this->evseCount)) {
            $json['evseCount']     = $this->evseCount;
        }
        if (isset($this->maxPower)) {
            $json['maxPower']      = $this->maxPower;
        }
        if (isset($this->geoHash)) {
            $json['geoHash']       = $this->geoHash;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
