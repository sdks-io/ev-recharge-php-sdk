<?php

declare(strict_types=1);

/*
 * ShellEVLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ShellEVLib\Models;

use ShellEVLib\Utils\DateTimeHelper;
use stdClass;

class DataRetrieve implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $id;

    /**
     * @var string|null
     */
    private $userId;

    /**
     * @var string|null
     */
    private $emaId;

    /**
     * @var string|null
     */
    private $evseId;

    /**
     * @var \DateTime|null
     */
    private $startedAt;

    /**
     * @var array
     */
    private $stoppedAt = [];

    /**
     * @var string|null
     */
    private $sessionState;

    /**
     * @var array
     */
    private $sessionCode = [];

    /**
     * @var array
     */
    private $sessionMessage = [];

    /**
     * Returns Id.
     * Id of the session
     */
    public function getId(): ?string
    {
        return $this->id;
    }

    /**
     * Sets Id.
     * Id of the session
     *
     * @maps Id
     */
    public function setId(?string $id): void
    {
        $this->id = $id;
    }

    /**
     * Returns User Id.
     * Id of the user that started the session
     */
    public function getUserId(): ?string
    {
        return $this->userId;
    }

    /**
     * Sets User Id.
     * Id of the user that started the session
     *
     * @maps UserId
     */
    public function setUserId(?string $userId): void
    {
        $this->userId = $userId;
    }

    /**
     * Returns Ema Id.
     * Id of the evse that the user is charging
     */
    public function getEmaId(): ?string
    {
        return $this->emaId;
    }

    /**
     * Sets Ema Id.
     * Id of the evse that the user is charging
     *
     * @maps EmaId
     */
    public function setEmaId(?string $emaId): void
    {
        $this->emaId = $emaId;
    }

    /**
     * Returns Evse Id.
     * Ema-id of the charge token that is used
     */
    public function getEvseId(): ?string
    {
        return $this->evseId;
    }

    /**
     * Sets Evse Id.
     * Ema-id of the charge token that is used
     *
     * @maps EvseId
     */
    public function setEvseId(?string $evseId): void
    {
        $this->evseId = $evseId;
    }

    /**
     * Returns Started At.
     * When the session is started
     */
    public function getStartedAt(): ?\DateTime
    {
        return $this->startedAt;
    }

    /**
     * Sets Started At.
     * When the session is started
     *
     * @maps StartedAt
     * @factory \ShellEVLib\Utils\DateTimeHelper::fromRfc3339DateTime
     */
    public function setStartedAt(?\DateTime $startedAt): void
    {
        $this->startedAt = $startedAt;
    }

    /**
     * Returns Stopped At.
     * When the session is stopped
     */
    public function getStoppedAt(): ?\DateTime
    {
        if (count($this->stoppedAt) == 0) {
            return null;
        }
        return $this->stoppedAt['value'];
    }

    /**
     * Sets Stopped At.
     * When the session is stopped
     *
     * @maps StoppedAt
     * @factory \ShellEVLib\Utils\DateTimeHelper::fromRfc3339DateTime
     */
    public function setStoppedAt(?\DateTime $stoppedAt): void
    {
        $this->stoppedAt['value'] = $stoppedAt;
    }

    /**
     * Unsets Stopped At.
     * When the session is stopped
     */
    public function unsetStoppedAt(): void
    {
        $this->stoppedAt = [];
    }

    /**
     * Returns Session State.
     * Describes the session state
     */
    public function getSessionState(): ?string
    {
        return $this->sessionState;
    }

    /**
     * Sets Session State.
     * Describes the session state
     *
     * @maps SessionState
     * @factory \ShellEVLib\Models\DataRetrieveSessionStateEnum::checkValue
     */
    public function setSessionState(?string $sessionState): void
    {
        $this->sessionState = $sessionState;
    }

    /**
     * Returns Session Code.
     * Session code e.g InternalError
     */
    public function getSessionCode(): ?string
    {
        if (count($this->sessionCode) == 0) {
            return null;
        }
        return $this->sessionCode['value'];
    }

    /**
     * Sets Session Code.
     * Session code e.g InternalError
     *
     * @maps SessionCode
     * @factory \ShellEVLib\Models\DataRetrieveSessionCodeEnum::checkValue
     */
    public function setSessionCode(?string $sessionCode): void
    {
        $this->sessionCode['value'] = $sessionCode;
    }

    /**
     * Unsets Session Code.
     * Session code e.g InternalError
     */
    public function unsetSessionCode(): void
    {
        $this->sessionCode = [];
    }

    /**
     * Returns Session Message.
     * Session message
     */
    public function getSessionMessage(): ?string
    {
        if (count($this->sessionMessage) == 0) {
            return null;
        }
        return $this->sessionMessage['value'];
    }

    /**
     * Sets Session Message.
     * Session message
     *
     * @maps SessionMessage
     */
    public function setSessionMessage(?string $sessionMessage): void
    {
        $this->sessionMessage['value'] = $sessionMessage;
    }

    /**
     * Unsets Session Message.
     * Session message
     */
    public function unsetSessionMessage(): void
    {
        $this->sessionMessage = [];
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->id)) {
            $json['Id']             = $this->id;
        }
        if (isset($this->userId)) {
            $json['UserId']         = $this->userId;
        }
        if (isset($this->emaId)) {
            $json['EmaId']          = $this->emaId;
        }
        if (isset($this->evseId)) {
            $json['EvseId']         = $this->evseId;
        }
        if (isset($this->startedAt)) {
            $json['StartedAt']      = DateTimeHelper::toRfc3339DateTime($this->startedAt);
        }
        if (!empty($this->stoppedAt)) {
            $json['StoppedAt']      = DateTimeHelper::toRfc3339DateTime($this->stoppedAt['value']);
        }
        if (isset($this->sessionState)) {
            $json['SessionState']   = DataRetrieveSessionStateEnum::checkValue($this->sessionState);
        }
        if (!empty($this->sessionCode)) {
            $json['SessionCode']    = DataRetrieveSessionCodeEnum::checkValue($this->sessionCode['value']);
        }
        if (!empty($this->sessionMessage)) {
            $json['SessionMessage'] = $this->sessionMessage['value'];
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
