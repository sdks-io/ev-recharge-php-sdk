<?php

declare(strict_types=1);

/*
 * ShellEVLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ShellEVLib\Models;

use ShellEVLib\ApiHelper;
use stdClass;

/**
 * Electrical Properties of the Connector
 */
class ElectricalProperties implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $powerType;

    /**
     * @var float|null
     */
    private $voltage;

    /**
     * @var float|null
     */
    private $amperage;

    /**
     * @var float|null
     */
    private $maxElectricPower;

    /**
     * Returns Power Type.
     */
    public function getPowerType(): ?string
    {
        return $this->powerType;
    }

    /**
     * Sets Power Type.
     *
     * @maps powerType
     * @factory \ShellEVLib\Models\ElectricalPropertiesPowerTypeEnum::checkValue
     */
    public function setPowerType(?string $powerType): void
    {
        $this->powerType = $powerType;
    }

    /**
     * Returns Voltage.
     * Voltage in Volts for this connector
     */
    public function getVoltage(): ?float
    {
        return $this->voltage;
    }

    /**
     * Sets Voltage.
     * Voltage in Volts for this connector
     *
     * @maps voltage
     */
    public function setVoltage(?float $voltage): void
    {
        $this->voltage = $voltage;
    }

    /**
     * Returns Amperage.
     * Electric Current in Amperes for this connector
     */
    public function getAmperage(): ?float
    {
        return $this->amperage;
    }

    /**
     * Sets Amperage.
     * Electric Current in Amperes for this connector
     *
     * @maps amperage
     */
    public function setAmperage(?float $amperage): void
    {
        $this->amperage = $amperage;
    }

    /**
     * Returns Max Electric Power.
     * Power in Kilowatts for this connector
     */
    public function getMaxElectricPower(): ?float
    {
        return $this->maxElectricPower;
    }

    /**
     * Sets Max Electric Power.
     * Power in Kilowatts for this connector
     *
     * @maps maxElectricPower
     */
    public function setMaxElectricPower(?float $maxElectricPower): void
    {
        $this->maxElectricPower = $maxElectricPower;
    }

    /**
     * Converts the ElectricalProperties object to a human-readable string representation.
     *
     * @return string The string representation of the ElectricalProperties object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify(
            'ElectricalProperties',
            [
                'powerType' => $this->powerType,
                'voltage' => $this->voltage,
                'amperage' => $this->amperage,
                'maxElectricPower' => $this->maxElectricPower
            ]
        );
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->powerType)) {
            $json['powerType']        = ElectricalPropertiesPowerTypeEnum::checkValue($this->powerType);
        }
        if (isset($this->voltage)) {
            $json['voltage']          = $this->voltage;
        }
        if (isset($this->amperage)) {
            $json['amperage']         = $this->amperage;
        }
        if (isset($this->maxElectricPower)) {
            $json['maxElectricPower'] = $this->maxElectricPower;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
