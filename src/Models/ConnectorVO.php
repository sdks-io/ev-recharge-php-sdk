<?php

declare(strict_types=1);

/*
 * ShellEVLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ShellEVLib\Models;

use stdClass;

/**
 * An EVSE can have one or many Connectors. Each Connector will normally have a different socket /
 * cable and only one can be used to charge at a time.
 */
class ConnectorVO implements \JsonSerializable
{
    /**
     * @var int|null
     */
    private $uid;

    /**
     * @var string|null
     */
    private $externalId;

    /**
     * @var string|null
     */
    private $connectorType;

    /**
     * @var ElectricalProperties|null
     */
    private $electricalProperties;

    /**
     * @var bool|null
     */
    private $fixedCable;

    /**
     * @var TariffVO|null
     */
    private $tariff;

    /**
     * @var string|null
     */
    private $updated;

    /**
     * @var string|null
     */
    private $updatedBy;

    /**
     * @var string|null
     */
    private $deleted;

    /**
     * Returns Uid.
     * Internal identifier used to refer to this Connector
     */
    public function getUid(): ?int
    {
        return $this->uid;
    }

    /**
     * Sets Uid.
     * Internal identifier used to refer to this Connector
     *
     * @maps uid
     */
    public function setUid(?int $uid): void
    {
        $this->uid = $uid;
    }

    /**
     * Returns External Id.
     * Identifier of the Evse as given by the Operator, unique for the containing EVSE'
     */
    public function getExternalId(): ?string
    {
        return $this->externalId;
    }

    /**
     * Sets External Id.
     * Identifier of the Evse as given by the Operator, unique for the containing EVSE'
     *
     * @maps externalId
     */
    public function setExternalId(?string $externalId): void
    {
        $this->externalId = $externalId;
    }

    /**
     * Returns Connector Type.
     * Type of the connector in the EVSE unit.
     */
    public function getConnectorType(): ?string
    {
        return $this->connectorType;
    }

    /**
     * Sets Connector Type.
     * Type of the connector in the EVSE unit.
     *
     * @maps connectorType
     * @factory \ShellEVLib\Models\ConnectorVOConnectorTypeEnum::checkValue
     */
    public function setConnectorType(?string $connectorType): void
    {
        $this->connectorType = $connectorType;
    }

    /**
     * Returns Electrical Properties.
     * Electrical Properties of the Connector
     */
    public function getElectricalProperties(): ?ElectricalProperties
    {
        return $this->electricalProperties;
    }

    /**
     * Sets Electrical Properties.
     * Electrical Properties of the Connector
     *
     * @maps electricalProperties
     */
    public function setElectricalProperties(?ElectricalProperties $electricalProperties): void
    {
        $this->electricalProperties = $electricalProperties;
    }

    /**
     * Returns Fixed Cable.
     * Indicates whether Connector has a fixed cable attached. False by default (not sent in this case)
     */
    public function getFixedCable(): ?bool
    {
        return $this->fixedCable;
    }

    /**
     * Sets Fixed Cable.
     * Indicates whether Connector has a fixed cable attached. False by default (not sent in this case)
     *
     * @maps fixedCable
     */
    public function setFixedCable(?bool $fixedCable): void
    {
        $this->fixedCable = $fixedCable;
    }

    /**
     * Returns Tariff.
     * Tariff details for charging on this Connector
     */
    public function getTariff(): ?TariffVO
    {
        return $this->tariff;
    }

    /**
     * Sets Tariff.
     * Tariff details for charging on this Connector
     *
     * @maps tariff
     */
    public function setTariff(?TariffVO $tariff): void
    {
        $this->tariff = $tariff;
    }

    /**
     * Returns Updated.
     * ISO8601-compliant UTC datetime of the last update of the Connectors's data
     */
    public function getUpdated(): ?string
    {
        return $this->updated;
    }

    /**
     * Sets Updated.
     * ISO8601-compliant UTC datetime of the last update of the Connectors's data
     *
     * @maps updated
     */
    public function setUpdated(?string $updated): void
    {
        $this->updated = $updated;
    }

    /**
     * Returns Updated By.
     * Source of the last update
     */
    public function getUpdatedBy(): ?string
    {
        return $this->updatedBy;
    }

    /**
     * Sets Updated By.
     * Source of the last update
     *
     * @maps updatedBy
     * @factory \ShellEVLib\Models\ConnectorVOUpdatedByEnum::checkValue
     */
    public function setUpdatedBy(?string $updatedBy): void
    {
        $this->updatedBy = $updatedBy;
    }

    /**
     * Returns Deleted.
     * optional  ISO8601-compliant UTC deletion timestamp of the connector
     */
    public function getDeleted(): ?string
    {
        return $this->deleted;
    }

    /**
     * Sets Deleted.
     * optional  ISO8601-compliant UTC deletion timestamp of the connector
     *
     * @maps deleted
     */
    public function setDeleted(?string $deleted): void
    {
        $this->deleted = $deleted;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->uid)) {
            $json['uid']                  = $this->uid;
        }
        if (isset($this->externalId)) {
            $json['externalId']           = $this->externalId;
        }
        if (isset($this->connectorType)) {
            $json['connectorType']        = ConnectorVOConnectorTypeEnum::checkValue($this->connectorType);
        }
        if (isset($this->electricalProperties)) {
            $json['electricalProperties'] = $this->electricalProperties;
        }
        if (isset($this->fixedCable)) {
            $json['fixedCable']           = $this->fixedCable;
        }
        if (isset($this->tariff)) {
            $json['tariff']               = $this->tariff;
        }
        if (isset($this->updated)) {
            $json['updated']              = $this->updated;
        }
        if (isset($this->updatedBy)) {
            $json['updatedBy']            = ConnectorVOUpdatedByEnum::checkValue($this->updatedBy);
        }
        if (isset($this->deleted)) {
            $json['deleted']              = $this->deleted;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
