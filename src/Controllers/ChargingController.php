<?php

declare(strict_types=1);

/*
 * ShellEVLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ShellEVLib\Controllers;

use Core\Request\Parameters\BodyParam;
use Core\Request\Parameters\HeaderParam;
use Core\Request\Parameters\QueryParam;
use Core\Response\Types\ErrorType;
use CoreInterfaces\Core\Request\RequestMethod;
use ShellEVLib\Exceptions\ApiException;
use ShellEVLib\Exceptions\BadRequestException;
use ShellEVLib\Exceptions\InternalServerErrorException;
use ShellEVLib\Exceptions\NotFoundException;
use ShellEVLib\Exceptions\ServiceunavailableException;
use ShellEVLib\Exceptions\TooManyRequestsException;
use ShellEVLib\Exceptions\UnauthorizedException;
use ShellEVLib\Models\ActiveResponse200Json;
use ShellEVLib\Models\ChargesessionStartBody;
use ShellEVLib\Models\GetChargeSessionRetrieveResponse200Json;
use ShellEVLib\Models\InlineResponse202;
use ShellEVLib\Models\InlineResponse2021;

class ChargingController extends BaseController
{
    /**
     * This endpoint start the charging session for the user.
     *
     * @param string $requestId RequestId must be unique identifier value that can be used by the
     *        consumer to correlate each request /response .<br>Format.<br> Its canonical textual
     *        representation, the 16 octets of a UUID are represented as 32 hexadecimal (base-16)
     *        digits, displayed in five groups separated by hyphens, in the form 8-4-4-4-12 for a
     *        total of 36 characters (32 hexadecimal characters and 4 hyphens) <br>
     * @param ChargesessionStartBody|null $body
     *
     * @return InlineResponse202 Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function start(string $requestId, ?ChargesessionStartBody $body = null): InlineResponse202
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/ev/v1/charge-session/start')
            ->auth('BearerAuth')
            ->parameters(
                HeaderParam::init('RequestId', $requestId),
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn(
                '400',
                ErrorType::init(
                    'The server cannot or will not process the request due to something that is' .
                    ' perceived to be a client error (e.g., malformed request syntax, invalid re' .
                    'quest message framing, or deceptive request routing).',
                    BadRequestException::class
                )
            )
            ->throwErrorOn(
                '401',
                ErrorType::init(
                    'The request has not been applied because it lacks valid authentication cre' .
                    'dentials for the target resource.',
                    UnauthorizedException::class
                )
            )
            ->throwErrorOn('404', ErrorType::init('Location Not Found', NotFoundException::class))
            ->throwErrorOn(
                '429',
                ErrorType::init(
                    'The Request reached maximum allocated rate limit',
                    TooManyRequestsException::class
                )
            )
            ->throwErrorOn('500', ErrorType::init('Internal Server error', InternalServerErrorException::class))
            ->throwErrorOn('503', ErrorType::init('Service unavailable', ServiceunavailableException::class))
            ->type(InlineResponse202::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Accepts a request to stop an active session when a valid session id is provided.
     *
     * @param string $requestId RequestId must be unique identifier value that can be used by the
     *        consumer to correlate each request /response .<br>Format.<br> Its canonical textual
     *        representation, the 16 octets of a UUID are represented as 32 hexadecimal (base-16)
     *        digits, displayed in five groups separated by hyphens, in the form 8-4-4-4-12 for a
     *        total of 36 characters (32 hexadecimal characters and 4 hyphens) <br>
     * @param string $sessionId Session Id
     *
     * @return InlineResponse2021 Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function stop(string $requestId, string $sessionId): InlineResponse2021
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/ev/v1/charge-session/stop')
            ->auth('BearerAuth')
            ->parameters(HeaderParam::init('RequestId', $requestId), QueryParam::init('sessionId', $sessionId));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn(
                '400',
                ErrorType::init(
                    'The server cannot or will not process the request due to something that is' .
                    ' perceived to be a client error (e.g., malformed request syntax, invalid re' .
                    'quest message framing, or deceptive request routing).',
                    BadRequestException::class
                )
            )
            ->throwErrorOn(
                '401',
                ErrorType::init(
                    'The request has not been applied because it lacks valid authentication cre' .
                    'dentials for the target resource.',
                    UnauthorizedException::class
                )
            )
            ->throwErrorOn('404', ErrorType::init('Location Not Found', NotFoundException::class))
            ->throwErrorOn(
                '429',
                ErrorType::init(
                    'The Request reached maximum allocated rate limit',
                    TooManyRequestsException::class
                )
            )
            ->throwErrorOn('500', ErrorType::init('Internal Server error', InternalServerErrorException::class))
            ->throwErrorOn('503', ErrorType::init('Service unavailable', ServiceunavailableException::class))
            ->type(InlineResponse2021::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * This endpoint returns the details of the session if the session is found.
     *
     * @param string $requestId RequestId must be unique identifier value that can be used by the
     *        consumer to correlate each request /response .<br>Format.<br> Its canonical textual
     *        representation, the 16 octets of a UUID are represented as 32 hexadecimal (base-16)
     *        digits, displayed in five groups separated by hyphens, in the form 8-4-4-4-12 for a
     *        total of 36 characters (32 hexadecimal characters and 4 hyphens) <br>
     * @param string $sessionId Session Id
     *
     * @return GetChargeSessionRetrieveResponse200Json Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function getChargeSessionRetrieve(
        string $requestId,
        string $sessionId
    ): GetChargeSessionRetrieveResponse200Json {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/ev/v1/charge-session/retrieve')
            ->auth('BearerAuth')
            ->parameters(HeaderParam::init('RequestId', $requestId), QueryParam::init('sessionId', $sessionId));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn(
                '400',
                ErrorType::init(
                    'The server cannot or will not process the request due to something that is' .
                    ' perceived to be a client error (e.g., malformed request syntax, invalid re' .
                    'quest message framing, or deceptive request routing).',
                    BadRequestException::class
                )
            )
            ->throwErrorOn(
                '401',
                ErrorType::init(
                    'The request has not been applied because it lacks valid authentication cre' .
                    'dentials for the target resource.',
                    UnauthorizedException::class
                )
            )
            ->throwErrorOn('404', ErrorType::init('Location Not Found', NotFoundException::class))
            ->throwErrorOn(
                '429',
                ErrorType::init(
                    'The Request reached maximum allocated rate limit',
                    TooManyRequestsException::class
                )
            )
            ->throwErrorOn('500', ErrorType::init('Internal Server error', InternalServerErrorException::class))
            ->throwErrorOn('503', ErrorType::init('Service unavailable', ServiceunavailableException::class))
            ->type(GetChargeSessionRetrieveResponse200Json::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Fetrches the active sessions for user.
     *
     * @param string $requestId RequestId must be unique identifier value that can be used by the
     *        consumer to correlate each request /response .<br>Format.<br> Its canonical textual
     *        representation, the 16 octets of a UUID are represented as 32 hexadecimal (base-16)
     *        digits, displayed in five groups separated by hyphens, in the form 8-4-4-4-12 for a
     *        total of 36 characters (32 hexadecimal characters and 4 hyphens) <br>
     * @param string $emaId Emobility Account Identifier(Ema-ID)
     *
     * @return ActiveResponse200Json Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function active(string $requestId, string $emaId): ActiveResponse200Json
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/ev/v1/charge-session/active')
            ->auth('BearerAuth')
            ->parameters(HeaderParam::init('RequestId', $requestId), QueryParam::init('emaId', $emaId));

        $_resHandler = $this->responseHandler()->type(ActiveResponse200Json::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }
}
