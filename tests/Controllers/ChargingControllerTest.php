<?php

declare(strict_types=1);

/*
 * ShellEVLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ShellEVLib\Tests\Controllers;

use Core\TestCase\BodyMatchers\KeysBodyMatcher;
use Core\TestCase\TestParam;
use ShellEVLib\Controllers\ChargingController;
use ShellEVLib\Exceptions;

class ChargingControllerTest extends BaseTestController
{
    /**
     * @var ChargingController ChargingController instance
     */
    protected static $controller;

    /**
     * Setup test class
     */
    public static function setUpBeforeClass(): void
    {
        self::$controller = parent::getClient()->getChargingController();
    }

    public function testStartChargeSession()
    {
        // Parameters for the API call
        $requestId = 'eb621f45-a543-4d9a-a934-2f223b263c42';
        $body = null;

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->startChargeSession($requestId, $body);
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/json', true];

        // Assert result with expected response
        $this->newTestCase($result)
            ->expectStatus(200)
            ->allowExtraHeaders()
            ->expectHeaders($headers)
            ->bodyMatcher(KeysBodyMatcher::init(TestParam::object(
                '{"RequestId":"9d2dee33-7803-485a-a2b1-2c7538e597ee","Status":"SUCCESS","Data":' .
                '[{"SessionId":"c3e332f0-1bb2-4f50-a96b-e075bbb71e68"}]}'
            )))
            ->assert();
    }

    public function testActive()
    {
        // Parameters for the API call
        $emaId = 'NL-TNM-C0216599X-A';
        $requestId = 'eb621f45-a543-4d9a-a934-2f223b263c42';

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->active($emaId, $requestId);
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/json', true];

        // Assert result with expected response
        $this->newTestCase($result)
            ->expectStatus(200)
            ->allowExtraHeaders()
            ->expectHeaders($headers)
            ->bodyMatcher(KeysBodyMatcher::init(TestParam::object(
                '{"RequestId":"9d2dee33-7803-485a-a2b1-2c7538e597ee","Status":"SUCCESS","Data":' .
                '[{"EmaId":"NL-TNM-C0216599X-A","EvseId":"NL*TNM*EVIRTUALCP0002*0","Id":"260f17a' .
                '9-52d4-4b40-ae74-83832b538975","StartedAt":"2022-10-21T09:11:23.455Z","SessionS' .
                'tate":"started","SessionCode":null,"SessionMessage":null,"UserId":"96f69b3b-8ad' .
                '4-487a-baaa-f1d3db741e88"}]}'
            )))
            ->assert();
    }
}
